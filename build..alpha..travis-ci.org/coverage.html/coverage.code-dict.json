{"/home/travis/build/npmtest/node-npmtest-downsize/test.js":"/* istanbul instrument in package npmtest_downsize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-downsize/lib.npmtest_downsize.js":"/* istanbul instrument in package npmtest_downsize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_downsize = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_downsize = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-downsize/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-downsize && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_downsize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_downsize\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_downsize.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_downsize.rollup.js'] =\n            local.assetsDict['/assets.npmtest_downsize.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_downsize.__dirname + '/lib.npmtest_downsize.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-downsize/node_modules/downsize/index.js":"var XRegexp = require('xregexp').XRegExp;\n\n(function (exportTo) {\n    \"use strict\";\n\n    // Nodes which should be considered implicitly self-closing\n    // Taken from http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#void-elements\n    var voidElements = [\n        \"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\",\n        \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"\n    ];\n\n    // These tags are intended to be sufficient to provide ghost markdown\n    // construct level context.\n    // http://support.ghost.org/markdown-guide/\n    var defaultContextualTags = [\n        \"p\", \"ul\", \"ol\", \"pre\", \"blockquote\",\n        \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"\n    ];\n\n    var downsize = function (text, inputOptions, offset) {\n        var stack = [],\n            pointer = 0,\n            tagName = \"\",\n            parseState = 0,\n            trackedState = {unitCount: 0, countState: false},\n            tagBuffer = \"\",\n            truncatedText = \"\";\n\n        var COUNT_CHARACTERS = -1,\n            COUNT_WORDS = -2;\n\n        var options = inputOptions && typeof inputOptions === \"object\" ? inputOptions : {},\n            wordChars = options.wordChars instanceof RegExp ?\n                options.wordChars : new XRegexp(\"[\\\\p{L}0-9\\\\-\\\\']\", \"i\");\n\n        options.countingType =\n            !isNaN(Number(options.words)) ? COUNT_WORDS : COUNT_CHARACTERS;\n\n        if (options.round) {\n            options.contextualTags = defaultContextualTags;\n        }\n\n        options.keepContext     = !!options.contextualTags;\n        options.contextualTags  = \n            options.keepContext && Array.isArray(options.contextualTags) ?\n                options.contextualTags : [];\n\n        options.limit =\n            (options.countingType === COUNT_WORDS) ?\n                Number(options.words) : Number(options.characters);\n\n        options.limit = isNaN(options.limit) ? Infinity : options.limit;\n\n        function isAtLimit() {\n            var stackIndex = 0;\n\n            // Return true when we've hit our limit\n            if (trackedState.unitCount < options.limit) {\n                return false;\n            }\n\n            // If we've got no special context to retain, do an early return.\n            if (!options.keepContext) {\n                return true;\n            }\n\n            for (; stackIndex < stack.length; stackIndex++) {\n                if (~options.contextualTags.indexOf(getTagName(stack[stackIndex]))) {\n                    return false;\n                }\n            }\n\n            // There are no contextual tags left, we can stop.\n            return true;\n        }\n\n        function count(chr) {\n            // TODO: 'Tock' for word counting happens when next whitespace is added.\n            //        i.e. it then needs stripping.\n            //        Should a pointer be passed to count instead of the chr?\n            //        This would allow forward lookup and allow 'Tock' on final char.\n            switch (options.countingType) {\n                case COUNT_WORDS:\n                    if (!!wordChars.test(chr + \"\") !== trackedState.countState) {\n\n                        trackedState.countState = !!wordChars.test(chr + \"\");\n\n                        // Only count the words on the \"tock\", or we'd be counting\n                        // them twice.\n                        if (!trackedState.countState) {\n                            trackedState.unitCount++;\n                        }\n                    }\n                    break;\n\n                case COUNT_CHARACTERS:\n                    // We pass in empty values to count word boundries\n                    // defined by tags.\n                    // This isn't relevant to character truncation.\n                    if (chr !== \"\") {\n                        trackedState.unitCount++;\n                    }\n                    break;\n            }\n        }\n\n        // Define our parse states\n        var PARSER_UNINITIALISED = 0,\n            PARSER_TAG_COMMENCED = 1,\n            PARSER_TAG_STRING = -1,\n            PARSER_TAG_STRING_SINGLE = -2,\n            PARSER_COMMENT = -3;\n\n        var exit = false;\n        for (; pointer < text.length && !exit; pointer++) {\n\n            if (parseState !== PARSER_UNINITIALISED) {\n                tagBuffer += text[pointer];\n            }\n\n            switch (text[pointer]) {\n\n                case \"<\":\n                    // Ooh look — we're starting a new tag.\n                    // (Provided we're in uninitialised state and the next\n                    // character is a word character, explamation mark or slash)\n\n                    if (parseState === PARSER_UNINITIALISED &&\n                        text[pointer + 1].match(/[a-z0-9\\-\\_\\/\\!]/)) {\n                        if (isAtLimit()) {\n                            exit = true;\n                            break;\n                        }\n                        parseState = PARSER_TAG_COMMENCED;\n                        tagBuffer += text[pointer];\n                    }\n\n                    break;\n\n                case \"!\":\n                    if (parseState === PARSER_TAG_COMMENCED &&\n                        text[pointer - 1] === \"<\") {\n\n                        parseState = PARSER_COMMENT;\n                    }\n\n                    break;\n\n                case \"-\":\n                    if (parseState === PARSER_COMMENT)\n                        parseState = PARSER_COMMENT;\n\n                    break;\n\n                case \"\\\"\":\n                    if (parseState === PARSER_TAG_STRING) {\n                        parseState = PARSER_TAG_COMMENCED;\n\n                    } else if (parseState === PARSER_TAG_STRING_SINGLE) {\n                        // if double quote is found in a single quote string,\n                        // ignore it and let the string finish\n                        break;\n\n                    } else if (parseState !== PARSER_UNINITIALISED) {\n                        parseState = PARSER_TAG_STRING;\n                    }\n\n                    break;\n\n                case \"'\":\n                    if (parseState === PARSER_TAG_STRING_SINGLE) {\n                        parseState = PARSER_TAG_COMMENCED;\n\n                    } else if (parseState === PARSER_TAG_STRING) {\n                        // if single quote is found in a double quote string,\n                        // ignore it and let the string finish\n                        break;\n\n                    } else if (parseState !== PARSER_UNINITIALISED) {\n                        parseState = PARSER_TAG_STRING_SINGLE;\n                    }\n\n                    break;\n\n                case \">\":\n\n                    if (parseState === PARSER_TAG_COMMENCED) {\n\n                        parseState = PARSER_UNINITIALISED;\n                        truncatedText += tagBuffer;\n                        tagName = getTagName(tagBuffer);\n\n                        // Closing tag. (Do we need to be more lenient/)\n                        if (tagBuffer.match(/<\\s*\\//)) {\n\n                            // We don't attempt to walk up the stack to close\n                            // tags. If the text to be truncated contains\n                            // malformed nesting, we just close what we're\n                            // permitted to and clean up at the end.\n                            if (getTagName(stack[stack.length-1]) === tagName) {\n                                stack.pop();\n                            }\n\n                        } else {\n                            // Nope, it's an opening tag.\n\n                            // Don't push self closing or void elements on to\n                            // the stack, since they have no effect on nesting.\n\n                            if (voidElements.indexOf(tagName) < 0 &&\n                                !tagBuffer.match(/\\/\\s*>$/)) {\n                                stack.push(tagBuffer);\n                            }\n                        }\n\n                        tagBuffer = \"\";\n\n                        // Closed tags are word boundries. Count!\n                        if (!isAtLimit()) {\n                            count(\"\");\n                            continue;\n                        }\n\n                    } else if (parseState === PARSER_COMMENT) {\n                        if (text.substring(pointer - 2, pointer) === \"--\") {\n                            parseState = PARSER_UNINITIALISED;\n                            truncatedText += tagBuffer;\n                            tagBuffer = \"\";\n\n                            // Closed tags are word boundries. Count!\n                            if (!isAtLimit()) {\n                                count(\"\");\n                                continue;\n                            }\n                        }\n                    }\n\n                    break; // break switch\n            }\n\n            // We're not inside a tag, comment, attribute, or string.\n            // This is just text.\n            if (parseState === PARSER_UNINITIALISED) {\n\n                // Have we had enough of a good thing?\n                if (isAtLimit()) {\n                    // console.log(\"limit at: '\" + text[pointer] +\"'\");\n                    // console.log(trackedState.unitCount);\n                    break;\n                }\n                count(text[pointer]);\n\n                // Nope, we still thirst for more.\n                truncatedText += text[pointer];\n            }\n\n        } // end of main parsing for loop\n\n        // 'Tock' for word counting happens when next whitespace is added.\n        // Strip this and any other trailing whitespace.\n        // TODO: what should the whitespace behavior be?\n        truncatedText = truncatedText.trim();\n\n        if (options.append && isAtLimit()) {\n            truncatedText += options.append;\n        }\n\n        // Append anything still left in the buffer\n        truncatedText += tagBuffer;\n\n        // Balance anything still left on the stack\n        while (stack.length) {\n            truncatedText += closeTag(stack.pop());\n        }\n\n        return truncatedText;\n    };\n\n    function closeTag(openingTag) {\n        // Grab the tag name, including namespace, if there is one.\n        var tagName = getTagName(openingTag);\n\n        // We didn't get a tag name, so return nothing. Better than\n        // a bad prediction, or a junk tag.\n        if (!tagName) {\n            return \"\";\n        }\n\n        return \"</\" + tagName + \">\";\n    }\n\n    function getTagName(tag) {\n        var tagName = (tag || \"\").match(/<\\/*([a-z0-9\\:\\-\\_]+)/i);\n        return tagName ? tagName[1] : null;\n    }\n\n    // Export to node\n    if (typeof module !== 'undefined' && module.exports) {\n        return module.exports = downsize;\n    }\n\n    // Nope, export to the browser instead.\n    exportTo.downsize = downsize;\n}(this));\n"}